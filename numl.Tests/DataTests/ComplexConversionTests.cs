using numl.Model;
using NUnit.Framework;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace numl.Tests.DataTests
{
    [TestFixture]
    public class ComplexConversionTests
    {
        private Descriptor Generate()
        {
            Descriptor d = new Descriptor();

            d.Features = new Property[]
            {
                new Property { Name = "Age" },
                new Property { Name = "Height" },
                new DateTimeProperty(DateTimeFeature.DayOfWeek | DateTimeFeature.Month) { Name = "BirthDate"  },
                new Property { Name = "Weight" },
                new Property { Name = "Good" },
                
            };

            return d;
        }

        [Test]
        public void Test_Vector_Conversion_Simple_Numbers_And_Dates()
        {
            var d = Generate();

            var o = new 
            { 
                Age = 23, 
                Height = 6.21d, 
                Weight = 220m, 
                Good = false, 
                BirthDate = new DateTime(2012, 11, 7, 2, 3, 4) 
            };

            // array generated by descriptor ordering
            var truths = new double[] { 23, 6.21,  
                                        /* DATE */
                                        11, 3,
                                        /* END DATE */
                                        220, -1 };
            var actual = d.Convert(o);
            Assert.AreEqual(truths, actual);
            // offset test
            Assert.AreEqual(2, d.Features[2].Start);
            Assert.AreEqual(4, d.Features[3].Start);
            Assert.AreEqual(5, d.Features[4].Start);

        }

        [Test]
        public void Test_Vector_Conversion_Simple_Numbers_And_Dates_2()
        {
            Descriptor d = Generate();

            d.Features[2] = new DateTimeProperty(DateTimeFeature.Year | DateTimeFeature.Month | DateTimeFeature.Hour) { Name = "BirthDate" };

            var o = new { Age = 23, Height = 6.21d, Weight = 220m, Good = false, BirthDate = new DateTime(2012, 11, 7, 2, 3, 4) };

            // array generated by descriptor ordering
            var truths = new double[] { 23, 6.21,  
                                        /* DATE */
                                        2012, 11, 2,
                                        /* END DATE */
                                        220, -1 };
            var actual = d.Convert(o);
            Assert.AreEqual(truths, actual);
            // offset test
            Assert.AreEqual(2, d.Features[2].Start);
            Assert.AreEqual(5, d.Features[3].Start);
            Assert.AreEqual(6, d.Features[4].Start);
        }
    }
}
